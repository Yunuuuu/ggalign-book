# Introduction {#sec-intro}

The `ggalign` package provides a flexible and powerful framework for composable
visualization, making it easy to build complex multi-plot layouts—such as
insets, multi-panel views, and circular compositions.

Built on top of the grammar of graphics, `ggalign` introduces intuitive tools to
align, stack, and nest plots in a way that preserves relationships between data
sources—ideal for visualizing shared patterns, clustering results, or
coordinated subplots.

Designed for high-dimensional data common in fields like genomics,
transcriptomics, and microbiome research, `ggalign` helps you create
publication-ready figures by composing diverse plots into cohesive, structured
layouts.

## Installation

You can install `ggalign` from `CRAN` using:
```{r}
#| eval: false
install.packages("ggalign")
```

Alternatively, install the development version from
[r-universe](https://yunuuuu.r-universe.dev/ggalign) with:
```{r}
#| eval: false
install.packages("ggalign",
    repos = c("https://yunuuuu.r-universe.dev", "https://cloud.r-project.org")
)
```

or from [GitHub](https://github.com/Yunuuuu/ggalign) with:
```{r}
#| eval: false
# install.packages("remotes")
remotes::install_github("Yunuuuu/ggalign")
```

## Plot Composition

### Data-Free Composition: Simple Plot Arrangement

ggalign is a grammar-based system for composing multi-panel visualizations in R,
designed to extend the expressive capabilities of ggplot2. At its core is a plot
composer architecture that spatially arranges independent plots—an approach we
refer to as data-free composition, where plots are combined without assuming any
data relationships.

Data-free composition represents traditional plot arrangement where independent
plots are spatially arranged without data relationships. This paradigm is
conceptually aligned with tools like `patchwork` or `cowplot`, but ggalign provides
finer control over alignment, spacing, and legend management, enabling more
precise and expressive layout designs.

The central engine for data-free composition is the `align_plots()` function. It
arranges multiple plots or graphic objects into a structured layout, with
detailed control over alignment, spacing, sizing, and guide collection.

Beneath `align_plots()` lies a modular transformation layer built around the
generic `patch()` function and the `Patch` R6-like object system. The `patch()`
function converts heterogeneous plot-like inputs—such as ComplexHeatmap,
pheatmap, base plots, and others—into standardized grid-compatible graphical
objects (grobs). The `Patch` object then encapsulates the layout semantics,
alignment logic, and compositional behavior.

This design not only facilitates consistent and flexible handling of diverse
graphical inputs but also makes the system extensible. By supporting generic
patching, users and developers can introduce new types of visual objects into
the `ggalign` ecosystem by implementing methods for `patch()` or or by defining new
`Patch` objects to implement custom layout strategies, allowing seamless
integration into complex multi-panel layoutst.

To support fine-grained control over alignment behavior, `ggalign` also includes a
set of modifier functions (e.g., `free_align()`, `free_space()`,
`free_border()`) that allow selective relaxation or customization of alignment
rules—making the system adaptable to a wide range of visualization scenarios.

```{mermaid}
flowchart TD
    %% Input Objects subgraph with title node
    subgraph InputObjects[" "]
        InputTitle["Input plot<br><br>(Plot Objects Ocean)"]
        style InputTitle fill:none,stroke:none,color:#7F3F00,font-weight:bold,font-size:28px
        G["ggplot"]
        H["ComplexHeatmap, pheatmap, base plot in formula, etc."]
    end

    %% Developer Interface subgraph with title node
    subgraph PatchGraph[" "]
        PatchGraphTitle["**Developer interface**"]
        style PatchGraphTitle fill:none,stroke:none,color:#827717,font-weight:bold,font-size:28px
        PatchFn["**patch()**<br>Automatically wraps inputs to Patchable"]
        Patch["**Patch object system**<br>Handles layout, alignment,<br>and composition logic"]
    end

    %% Modifiers subgraph with title node
    subgraph Modifiers[" "]
        ModifiersTitle["**Modifiers**"]
        style ModifiersTitle fill:none,stroke:none,color:#E65100,font-weight:bold,font-size:28px
        F1["free_align()"]
        F1Desc["Disable axis-based panel alignment"]
        F2["free_space()"]
        F2Desc["Remove spacing constraints"]
        F3["free_border()"]
        F3Desc["Attach border elements to panels"]
        F4["free_lab()"]
        F4Desc["Attach axis labels/titles to panels"]
        F5["free_vp()"]
        F5Desc["Customize viewport placement"]
        F6["free_guide()"]
        F6Desc["Override legend alignment"]
    end

    %% Core engine and render nodes
    Align["**align_plots()**<br>Core data-free composition engine<br>"]
    Render["Rendering"]

    %% Flow connections
    H --> PatchFn
    H --> Patch
    G --> Patch

    InputObjects --> Align
    InputObjects --> Modifiers
    Modifiers --> Align
    Modifiers --> Patch
    PatchFn --> Patch

    F1 --> F1Desc
    F2 --> F2Desc
    F3 --> F3Desc
    F4 --> F4Desc
    F5 --> F5Desc
    F6 --> F6Desc

    Patch --- D[" "]
    Align --- D
    D --> Render

    %% Styling
    classDef empty width:0px,height:0px
    class D empty

    style G fill:#D1E8FF,stroke:#1E90FF,stroke-width:2px,color:#1E3A8A,font-size:28px
    style H fill:#FFE5D9,stroke:#FF7F50,stroke-width:2px,color:#7F3F00,font-size:28px
    style PatchFn fill:#F0F4C3,stroke:#C0CA33,stroke-width:2px,color:#616515,font-size:28px
    style Patch fill:#C8E6C9,stroke:#388E3C,stroke-width:2px,color:#2E7D32,font-size:28px
    style F1 fill:#FFE0B2,stroke:#FB8C00,stroke-width:2px,color:#663C00,font-size:28px
    style F1Desc fill:#FFECB3,stroke:#FFB300,stroke-width:1px,color:#6D4C41,font-size:28px
    style F2 fill:#FFCCBC,stroke:#FF5722,stroke-width:2px,color:#4E342E,font-size:28px
    style F2Desc fill:#FFCDD2,stroke:#E57373,stroke-width:1px,color:#B71C1C,font-size:28px
    style F3 fill:#FFF9C4,stroke:#FBC02D,stroke-width:2px,color:#827717,font-size:28px
    style F3Desc fill:#FFFDE7,stroke:#FBC02D,stroke-width:1px,color:#F9A825,font-size:28px
    style F4 fill:#E1BEE7,stroke:#9C27B0,stroke-width:2px,color:#4A148C,font-size:28px
    style F4Desc fill:#F3E5F5,stroke:#BA68C8,stroke-width:1px,color:#6A1B9A,font-size:28px
    style F5 fill:#B2DFDB,stroke:#00796B,stroke-width:2px,color:#004D40,font-size:28px
    style F5Desc fill:#E0F2F1,stroke:#004D40,stroke-width:1px,color:#00695C,font-size:28px
    style F6 fill:#CFD8DC,stroke:#607D8B,stroke-width:2px,color:#263238,font-size:28px
    style F6Desc fill:#ECEFF1,stroke:#90A4AE,stroke-width:1px,color:#455A64,font-size:28px

    style InputObjects fill:none,stroke:#888888,stroke-width:2px,font-size:0px
    style Align fill:#BBDEFB,stroke:#2196F3,stroke-width:2px,color:#0D47A1,font-size:28px
    style Modifiers fill:#FFF3E0,stroke:#FFB300,stroke-width:2px,color:#E65100,font-size:0px
    style Render fill:#C5CAE9,stroke:#3F51B5,stroke-width:2px,color:#1A237E,font-size:28px

```

### Data-Aware Composition: Integrated Data Visualization

Data-aware composition is `ggalign`'s core innovation, where multiple plots share
common observations and maintain consistent data alignment across all
visualizations.

```{mermaid}
flowchart TD
    %% Layout system
    subgraph Layout[" "]
        style Layout fill:#FFF3E0,stroke:#D2691E,stroke-width:3px
        LayoutTitle["**Layout system**"]
        style LayoutTitle fill:none,stroke:none,color:#D2691E,font-weight:bold,font-size:28px

        Stack["**StackLayout**"]
        Circle["**CircleLayout**"]
        Quad["**QuadLayout**"]

        %%  StackDesc["Stacks plots horizontally or vertically"]
        %%  CircleDesc["Positions plots in a circular pattern"]
        %%  QuadDesc["Arranges plots in a grid of four quadrants"]
    end
    DataFree["Building with Data-free composition"]
    Render["Rendering"]

    %% Stack --- StackDesc
    %% Circle --- CircleDesc
    %% Quad --- QuadDesc

    style Stack fill:#FFE4B5,stroke:#D2691E,stroke-width:2px,color:#D2691E,font-weight:bold,font-size:28px
    style Circle fill:#FFE4B5,stroke:#D2691E,stroke-width:2px,color:#D2691E,font-weight:bold,font-size:28px
    style Quad fill:#FFE4B5,stroke:#D2691E,stroke-width:2px,color:#D2691E,font-weight:bold,font-size:28px
    %% style StackDesc fill:#FFF5E1,color:#D2691E,font-size:28px
    %% style CircleDesc fill:#FFF5E1,color:#D2691E,font-size:28px
    %% style QuadDesc fill:#FFF5E1,color:#D2691E,font-size:28px

    %% CraftBox system
    subgraph CraftBox[" "]
        style CraftBox fill:#E6F2E6,stroke:#2E8B57,stroke-width:3px
        CraftBoxTitle["**CraftBox system**<br><br>User Interface"]
        style CraftBoxTitle fill:none,stroke:none,color:#2E8B57,font-weight:bold,font-size:28px
        
        AlignHclust["align_hclust()"]
        AlignOrder["align_order()"]
        AlignKmeans["align_kmeans()"]
        AlignGroup["align_group()"]

        %% AlignHclustDesc["Hierarchical clustering"]
        %% AlignOrderDesc["Custom ordering"]
        %% AlignKmeansDesc["K-means clustering"]
        %% AlignGroupDesc["Manual grouping"]

        AlignDendro["align_dendro()"]
        Ggalign["ggalign()"]
        Ggfree["ggfree()"]
        Ggmark["ggmark()"]
        CrossLink["cross_link()"]

        %% GgalignDesc["Add aligned plots to layouts"]
        %% GgfreeDesc["Add freely positioned plots"]
        %% GgmarkDesc["Annotate linked observations"]
        %% CrossLinkDesc["Create cross-panel links (lines/polygons)"]
    end

    %% AlignHclust --- AlignHclustDesc
    %% AlignOrder --- AlignOrderDesc
    %% AlignKmeans --- AlignKmeansDesc
    %% AlignGroup --- AlignGroupDesc
    
    %% Ggalign --- GgalignDesc
    %% Ggfree --- GgfreeDesc
    %% Ggmark --- GgmarkDesc
    %% CrossLink --- CrossLinkDesc

    style AlignHclust fill:#C1E1C1,stroke:#2E8B57,stroke-width:2px,color:#2E8B57,font-weight:bold,font-size:28px
    style AlignOrder fill:#C1E1C1,stroke:#2E8B57,stroke-width:2px,color:#2E8B57,font-weight:bold,font-size:28px
    style AlignKmeans fill:#C1E1C1,stroke:#2E8B57,stroke-width:2px,color:#2E8B57,font-weight:bold,font-size:28px
    style AlignGroup fill:#C1E1C1,stroke:#2E8B57,stroke-width:2px,color:#2E8B57,font-weight:bold,font-size:28px

    style AlignDendro fill:#A9DFBF,stroke:#2E8B57,stroke-width:2px,color:#2E8B57,font-weight:bold,font-size:28px
    style Ggalign fill:#A9DFBF,stroke:#2E8B57,stroke-width:2px,color:#2E8B57,font-weight:bold,font-size:28px
    style Ggfree fill:#A9DFBF,stroke:#2E8B57,stroke-width:2px,color:#2E8B57,font-weight:bold,font-size:28px
    style Ggmark fill:#A9DFBF,stroke:#2E8B57,stroke-width:2px,color:#2E8B57,font-weight:bold,font-size:28px
    style CrossLink fill:#A9DFBF,stroke:#2E8B57,stroke-width:2px,color:#2E8B57,font-weight:bold,font-size:28px

    %% style AlignHclustDesc fill:#D5F5E3,color:#2E8B57,font-size:28px
    %% style AlignOrderDesc fill:#D5F5E3,color:#2E8B57,font-size:28px
    %% style AlignKmeansDesc fill:#D5F5E3,color:#2E8B57,font-size:28px
    %% style AlignGroupDesc fill:#D5F5E3,color:#2E8B57,font-size:28px

    %% style GgalignDesc fill:#DFF0D8,color:#2E8B57,font-size:28px
    %% style GgfreeDesc fill:#DFF0D8,color:#2E8B57,font-size:28px
    %% style GgmarkDesc fill:#DFF0D8,color:#2E8B57,font-size:28px
    %% style CrossLinkDesc fill:#DFF0D8,color:#2E8B57,font-size:28px

    %% Linking system
    subgraph Linking[" "]
        style Linking fill:#E0F0FF,stroke:#1E90FF,stroke-width:3px
        LinkingTitle["**Linking system**<br><br>Manages connections between observations"]
        style LinkingTitle fill:none,stroke:none,color:#1E90FF,font-weight:bold,font-size:28px
    end

    Linking --o Ggmark
    Linking --o CrossLink

    %% Developer Interface
    Craftsman["**Developer interface**<br><br>**Craftsman**<br><br>Core logic for grouping, clustering, ordering, and adding plots"]
    style Craftsman fill:#FFF8DC,stroke:#B8860B,stroke-width:3px,color:#B8860B,font-weight:bold,font-size:28px

    %% Scheme system
    subgraph Scheme[" "]
        style Scheme fill:#F5E6FF,stroke:#8B008B,stroke-width:3px
        SchemeTitle["**Scheme system**<br><br>Visual/Structural controls"]
        style SchemeTitle fill:none,stroke:none,color:#8B008B,font-weight:bold,font-size:28px
        SchemeTheme["scheme_theme()"]
        SchemeData["scheme_data()"]
        SchemeAlign["scheme_align()"]

        %% SchemeThemeDesc["Controls theming"]
        %% SchemeDataDesc["Data transformations"]
        %% SchemeAlignDesc["Alignment specifications"]
    end

    %% SchemeTheme --- SchemeThemeDesc
    %% SchemeData --- SchemeDataDesc
    %% SchemeAlign --- SchemeAlignDesc

    style SchemeTheme fill:#E6E6FA,stroke:#8B008B,stroke-width:2px,color:#8B008B,font-weight:bold,font-size:28px
    style SchemeData fill:#E6E6FA,stroke:#8B008B,stroke-width:2px,color:#8B008B,font-weight:bold,font-size:28px
    style SchemeAlign fill:#E6E6FA,stroke:#8B008B,stroke-width:2px,color:#8B008B,font-weight:bold,font-size:28px

    %% style SchemeThemeDesc fill:#F0F8FF,color:#8B008B,font-size:28px
    %% style SchemeDataDesc fill:#F0F8FF,color:#8B008B,font-size:28px
    %% style SchemeAlignDesc fill:#F0F8FF,color:#8B008B,font-size:28px

    %% Scheme implementation
    subgraph SchemeImpl[" "]
        style SchemeImpl fill:#FDE6F8,stroke:#800080,stroke-width:3px
        SchemeImplTitle["**Developer interface**"]
        style SchemeImplTitle fill:none,stroke:none,color:#8B008,font-weight:bold,font-size:28px
        SchemeUpdate["scheme_update()"]
        SchemeInit["scheme_init()"]
        SchemeInherit["scheme_inherit()"]
        PlotAddScheme["plot_add_scheme()"]

        SchemeUpdateDesc["Updates scheme properties"]
        SchemeInitDesc["Initializes scheme"]
        SchemeInheritDesc["Inherits properties"]
        PlotAddSchemeDesc["Applies schemes to plots"]
    end

    SchemeUpdate --- SchemeUpdateDesc
    SchemeInit --- SchemeInitDesc
    SchemeInherit --- SchemeInheritDesc
    PlotAddScheme --- PlotAddSchemeDesc

    style SchemeUpdate fill:#FFF0F5,stroke:#800080,stroke-width:2px,color:#800080,font-weight:bold,font-size:28px
    style SchemeInit fill:#FFF0F5,stroke:#800080,stroke-width:2px,color:#800080,font-weight:bold,font-size:28px
    style SchemeInherit fill:#FFF0F5,stroke:#800080,stroke-width:2px,color:#800080,font-weight:bold,font-size:28px
    style PlotAddScheme fill:#FFF0F5,stroke:#800080,stroke-width:2px,color:#800080,font-weight:bold,font-size:28px

    style SchemeUpdateDesc fill:#FFE4F1,color:#800080,font-size:28px
    style SchemeInitDesc fill:#FFE4F1,color:#800080,font-size:28px
    style SchemeInheritDesc fill:#FFE4F1,color:#800080,font-size:28px
    style PlotAddSchemeDesc fill:#FFE4F1,color:#800080,font-size:28px
    style DataFree fill:#FFECB3,stroke:#FF6F00,stroke-width:2px,color:#BF360C,font-weight:bold,font-size:28px
    style Render fill:#C5CAE9,stroke:#3F51B5,stroke-width:2px,color:#1A237E,font-size:28px

    %% Connections
    SchemeImpl --> Scheme
    CraftBox --o Layout
    Craftsman --o CraftBox
    Scheme --o CraftBox
    Scheme --o Layout
    Layout --> DataFree
    DataFree --> Render
```
