# Introduction {#sec-intro}

The `ggalign` package provides a flexible and powerful framework for composable
visualization, making it easy to build complex multi-plot layouts—such as
insets, multi-panel views, and circular compositions.

Built on top of the grammar of graphics, `ggalign` introduces intuitive tools to
align, stack, and nest plots in a way that preserves relationships between data
sources—ideal for visualizing shared patterns, clustering results, or
coordinated subplots.

Designed for high-dimensional data common in fields like genomics,
transcriptomics, and microbiome research, `ggalign` helps you create
publication-ready figures by composing diverse plots into cohesive, structured
layouts.

## Installation

You can install `ggalign` from `CRAN` using:
```{r}
#| eval: false
install.packages("ggalign")
```

Alternatively, install the development version from
[r-universe](https://yunuuuu.r-universe.dev/ggalign) with:
```{r}
#| eval: false
install.packages("ggalign",
    repos = c("https://yunuuuu.r-universe.dev", "https://cloud.r-project.org")
)
```

or from [GitHub](https://github.com/Yunuuuu/ggalign) with:
```{r}
#| eval: false
# install.packages("remotes")
remotes::install_github("Yunuuuu/ggalign")
```

## Plot Composition

### Data-Free Composition: Simple Plot Arrangement

ggalign is a grammar-based system for composing multi-panel visualizations in R,
designed to extend the expressive capabilities of ggplot2. At its core is a plot
composer architecture that spatially arranges independent plots—an approach we
refer to as data-free composition, where plots are combined without assuming any
data relationships.

Data-free composition represents traditional plot arrangement where independent
plots are spatially arranged without data relationships. This paradigm is
conceptually aligned with tools like `patchwork` or `cowplot`, but ggalign provides
finer control over alignment, spacing, and legend management, enabling more
precise and expressive layout designs.

The central engine for data-free composition is the `align_plots()` function. It
arranges multiple plots or graphic objects into a structured layout, with
detailed control over alignment, spacing, sizing, and guide collection.

Beneath `align_plots()` lies a modular transformation layer built around the
generic `patch()` function and the `Patch` R6-like object system. The `patch()`
function converts heterogeneous plot-like inputs—such as ComplexHeatmap,
pheatmap, base plots, and others—into standardized grid-compatible graphical
objects (grobs). The `Patch` object then encapsulates the layout semantics,
alignment logic, and compositional behavior.

This design not only facilitates consistent and flexible handling of diverse
graphical inputs but also makes the system extensible. By supporting generic
patching, users and developers can introduce new types of visual objects into
the `ggalign` ecosystem by implementing methods for `patch()` or or by defining new
`Patch` objects to implement custom layout strategies, allowing seamless
integration into complex multi-panel layoutst.

To support fine-grained control over alignment behavior, `ggalign` also includes a
set of modifier functions (e.g., `free_align()`, `free_space()`,
`free_border()`) that allow selective relaxation or customization of alignment
rules—making the system adaptable to a wide range of visualization scenarios.

```{mermaid}
flowchart TD
    %% Input Objects subgraph with title node
    subgraph InputObjects[" "]
        InputTitle["Input plot<br>(Plot Objects Ocean)"]
        style InputTitle fill:none,stroke:none,color:#7F3F00,font-weight:bold,font-size:28px
        G["ggplot"]
        H["ComplexHeatmap, pheatmap, base plot with formula, etc."]
    end

    %% Developer Interface subgraph with title node
    subgraph Internal[" "]
        InternalTitle["Developer interface"]
        style InternalTitle fill:none,stroke:none,color:#827717,font-weight:bold,font-size:28px
        PatchFn["**patch()**<br><i>Automatically wraps inputs to Patchable</i>"]
        Patch["**Patch object system**<br><i>Handles layout, alignment,<br>and composition logic</i>"]
    end

    %% Modifiers subgraph with title node
    subgraph Modifiers[" "]
        ModifiersTitle["Modifiers"]
        style ModifiersTitle fill:none,stroke:none,color:#E65100,font-weight:bold,font-size:28px
        F1["free_align()"]
        F1Desc["Disable axis-based panel alignment"]
        F2["free_space()"]
        F2Desc["Remove spacing constraints"]
        F3["free_border()"]
        F3Desc["Attach border elements to panels"]
        F4["free_lab()"]
        F4Desc["Attach axis labels/titles to panels"]
        F5["free_vp()"]
        F5Desc["Customize viewport placement"]
        F6["free_guide()"]
        F6Desc["Override legend alignment"]
    end

    %% Core engine and render nodes
    Align["**align_plots()**<br>Core data-free composition engine<br>"]
    Render["Rendering"]

    %% Flow connections
    H --> PatchFn
    H --> Patch
    G --> Patch

    InputObjects --> Align
    InputObjects --> Modifiers
    Modifiers --> Align
    Modifiers --> Patch
    PatchFn --> Patch

    F1 --> F1Desc
    F2 --> F2Desc
    F3 --> F3Desc
    F4 --> F4Desc
    F5 --> F5Desc
    F6 --> F6Desc

    Patch --- D[" "]
    Align --- D
    D --> Render

    %% Styling
    classDef empty width:0px,height:0px
    class D empty

    style G fill:#D1E8FF,stroke:#1E90FF,stroke-width:2px,color:#1E3A8A,font-size:28px
    style H fill:#FFE5D9,stroke:#FF7F50,stroke-width:2px,color:#7F3F00,font-size:28px
    style PatchFn fill:#F0F4C3,stroke:#C0CA33,stroke-width:2px,color:#616515,font-size:28px
    style Patch fill:#C8E6C9,stroke:#388E3C,stroke-width:2px,color:#2E7D32,font-size:28px
    style F1 fill:#FFE0B2,stroke:#FB8C00,stroke-width:2px,color:#663C00,font-size:28px
    style F1Desc fill:#FFECB3,stroke:#FFB300,stroke-width:1px,color:#6D4C41,font-size:28px
    style F2 fill:#FFCCBC,stroke:#FF5722,stroke-width:2px,color:#4E342E,font-size:28px
    style F2Desc fill:#FFCDD2,stroke:#E57373,stroke-width:1px,color:#B71C1C,font-size:28px
    style F3 fill:#FFF9C4,stroke:#FBC02D,stroke-width:2px,color:#827717,font-size:28px
    style F3Desc fill:#FFFDE7,stroke:#FBC02D,stroke-width:1px,color:#F9A825,font-size:28px
    style F4 fill:#E1BEE7,stroke:#9C27B0,stroke-width:2px,color:#4A148C,font-size:28px
    style F4Desc fill:#F3E5F5,stroke:#BA68C8,stroke-width:1px,color:#6A1B9A,font-size:28px
    style F5 fill:#B2DFDB,stroke:#00796B,stroke-width:2px,color:#004D40,font-size:28px
    style F5Desc fill:#E0F2F1,stroke:#004D40,stroke-width:1px,color:#00695C,font-size:28px
    style F6 fill:#CFD8DC,stroke:#607D8B,stroke-width:2px,color:#263238,font-size:28px
    style F6Desc fill:#ECEFF1,stroke:#90A4AE,stroke-width:1px,color:#455A64,font-size:28px

    style InputObjects fill:none,stroke:#888888,stroke-width:0px
    style Align fill:#BBDEFB,stroke:#2196F3,stroke-width:2px,color:#0D47A1,font-size:28px
    style Modifiers fill:#FFF3E0,stroke:#FFB300,stroke-width:2px,color:#E65100,font-size:0px
    style Render fill:#C5CAE9,stroke:#3F51B5,stroke-width:2px,color:#1A237E,font-size:28px
    style Internal fill:#FFF9C4,stroke:#FBC02D,stroke-width:2px,color:#827717,font-size:0px

```

### Data-Aware Composition: Integrated Data Visualization

Data-aware composition is `ggalign`'s core innovation, where multiple plots share
common observations and maintain consistent data alignment across all
visualizations.

```{mermaid}
graph TB
    SHARED["Shared Data<br/>Common observations"]
    LAYOUT["Layout System:<br/>quad_layout()<br/>stack_layout()<br/>circle_layout()"]
    ALIGN["Layout Customization<br/>Data-Level Ordering and Grouping"]
    PLOTS["Coordinated Plots<br/>Automatic observation sync"]
    OUTPUT2["Integrated Visualization<br/>Guaranteed alignment"]
    
    SHARED --> LAYOUT
    LAYOUT --> ALIGN
    LAYOUT --> PLOTS
    ALIGN --> OUTPUT2
    PLOTS --> OUTPUT2

    style SHARED fill:#d0e6f7,stroke:#1f78b4,stroke-width:2px,color:#0b3d91
    style LAYOUT fill:#f0f4c3,stroke:#c0ca33,stroke-width:2px,color:#616515
    style ALIGN fill:#ffe0b2,stroke:#fb8c00,stroke-width:2px,color:#663c00
    style PLOTS fill:#dcedc8,stroke:#689f38,stroke-width:2px,color:#33691e
    style OUTPUT2 fill:#c8e6c9,stroke:#388e3c,stroke-width:2px,color:#2e7d32
```

**Key Features:**

- **Observation Consistency**: Data points from same observations aligned across all plots
- **Automatic Synchronization**: No manual coordinate management required
- **Complex Relationships**: Supports one-to-many, many-to-many, and crosswise data relationships
- **Specialized Layouts**: Purpose-built layouts for specific data types
