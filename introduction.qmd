# Introduction {#sec-intro}

The `ggalign` package provides a flexible and powerful framework for composable
visualization, making it easy to build complex multi-plot layouts—such as
insets, multi-panel views, and circular compositions.

Built on top of the grammar of graphics, `ggalign` introduces intuitive tools to
align, stack, and nest plots in a way that preserves relationships between data
sources—ideal for visualizing shared patterns, clustering results, or
coordinated subplots.

Designed for high-dimensional data common in fields like genomics,
transcriptomics, and microbiome research, `ggalign` helps you create
publication-ready figures by composing diverse plots into cohesive, structured
layouts.

`ggalign` fills a critical gap in the R visualization ecosystem by providing:

- **Seamless ggplot2 integration**: Full compatibility with geoms, scales, themes, and other ggplot2 components
- **Automatic data alignment**: No manual coordinate management required
- **Flexible layout system**: Support for linear, quad, and circular arrangements
- **Biological data focus**: Specialized functions for genomics, transcriptomics, and clinical data
- **Publication-ready output**: High-quality figures suitable for scientific publications


## Installation

You can install `ggalign` from `CRAN` using:
```{r}
#| eval: false
install.packages("ggalign")
```

Alternatively, install the development version from
[r-universe](https://yunuuuu.r-universe.dev/ggalign) with:
```{r}
#| eval: false
install.packages("ggalign",
    repos = c("https://yunuuuu.r-universe.dev", "https://cloud.r-project.org")
)
```

or from [GitHub](https://github.com/Yunuuuu/ggalign) with:
```{r}
#| eval: false
# install.packages("remotes")
remotes::install_github("Yunuuuu/ggalign")
```

## Package Input and Output

### Input Types

ggalign accepts diverse input formats to accommodate different data structures commonly used in biological research:

- **Matrices**: Gene expression data, correlation matrices, distance matrices
- **Data frames**: Clinical data, metadata, experimental conditions
- **Specialized objects**: MAF objects (maftools), phylogenetic trees (ape), clustering results (hclust)
- **External graphics**: ComplexHeatmap objects, pheatmap visualizations, base R plots

### Output Types

The package produces two main types of outputs:

1. **Data-Free Compositions**: Standard ggplot2 objects arranged in grids, compatible with all ggplot2 functionality
2. **Data-Aware Compositions**: Specialized layout objects that maintain observation alignment and can be further customized with additional plots and annotations

Both output types are fully compatible with the ggplot2 ecosystem and can be saved using `ggsave()` or converted to other formats for publication.

## Plot Composition

`ggalign` supports two core paradigms for plot composition, depending on how the
data is shared or separated between plots.

### Data-Free Composition: Simple Plot Arrangement

Data-free composition represents traditional plot arrangement where independent
plots are spatially arranged without data relationships. This approach is
similar to what packages like `patchwork` or `cowplot` provide.

```{mermaid}
graph TD
    %% Input objects
    subgraph InputObjects["Input Objects"]
        G["ggplot"]
        H["ComplexHeatmap, pheatmap, base plot with formula, etc."]
    end

    %% Internal automatic processing
    subgraph Internal["Internal Processing (automatic)"]
        PatchFn["**patch()**<br/><i>Automatically wraps inputs to Patchable</i>"]
        Patch["**Patch object system**<br/><i>Handles layout, alignment,<br/>and composition logic</i>"]
    end

    %% Core engine
    Align["**align_plots()**<br/>Core layout engine<br/><i>Accepts raw inputs or Patch objects</i>"]

    %% Layout modifiers
    subgraph Modifiers
        F1["free_align()"]
        F1Desc["Disable axis-based panel alignment"]
        F2["free_space()"]
        F2Desc["Remove spacing constraints"]
        F3["free_border()"]
        F3Desc["Attach border elements to panels"]
        F4["free_lab()"]
        F4Desc["Attach axis labels/titles to panels"]
        F5["free_vp()"]
        F5Desc["Customize viewport placement"]
        F6["free_guide()"]
        F6Desc["Override legend alignment"]
    end

    %% Flow of data
    G --> Align
    H --> PatchFn
    G --> Patch
    H --> Patch
    PatchFn --> Patch
    Patch --> Align

    %% Dashed arrow: inputs can also be passed directly to align_plots()
    H -.-> Align

    Align --> F1
    Align --> F2
    Align --> F3
    Align --> F4
    Align --> F5
    Align --> F6

    F1 --> F1Desc
    F2 --> F2Desc
    F3 --> F3Desc
    F4 --> F4Desc
    F5 --> F5Desc
    F6 --> F6Desc

    %% Styling
    style InputObjects fill:none,stroke:#888888,stroke-width:2px
    style Internal fill:#FFF9C4,stroke:#FBC02D,stroke-width:2px,color:#827717
    style G fill:#D1E8FF,stroke:#1E90FF,stroke-width:2px,color:#1E3A8A
    style H fill:#FFE5D9,stroke:#FF7F50,stroke-width:2px,color:#7F3F00
    style PatchFn fill:#F0F4C3,stroke:#C0CA33,stroke-width:2px,color:#616515
    style Patch fill:#C8E6C9,stroke:#388E3C,stroke-width:2px,color:#2E7D32
    style Align fill:#BBDEFB,stroke:#2196F3,stroke-width:2px,color:#0D47A1
    style Modifiers fill:#FFF3E0,stroke:#FFB300,stroke-width:2px,color:#E65100

    style F1 fill:#FFE0B2,stroke:#FB8C00,stroke-width:2px,color:#663C00
    style F1Desc fill:#FFECB3,stroke:#FFB300,stroke-width:1px,color:#6D4C41

    style F2 fill:#FFCCBC,stroke:#FF5722,stroke-width:2px,color:#4E342E
    style F2Desc fill:#FFCDD2,stroke:#E57373,stroke-width:1px,color:#B71C1C

    style F3 fill:#FFF9C4,stroke:#FBC02D,stroke-width:2px,color:#827717
    style F3Desc fill:#FFFDE7,stroke:#FBC02D,stroke-width:1px,color:#F9A825

    style F4 fill:#E1BEE7,stroke:#9C27B0,stroke-width:2px,color:#4A148C
    style F4Desc fill:#F3E5F5,stroke:#BA68C8,stroke-width:1px,color:#6A1B9A

    style F5 fill:#B2DFDB,stroke:#00796B,stroke-width:2px,color:#004D40
    style F5Desc fill:#E0F2F1,stroke:#004D40,stroke-width:1px,color:#00695C

    style F6 fill:#CFD8DC,stroke:#607D8B,stroke-width:2px,color:#263238
    style F6Desc fill:#ECEFF1,stroke:#90A4AE,stroke-width:1px,color:#455A64
```

**Characteristics:**

- Each plot uses independent data sources
- No shared observations between plots (maybe)
- Suitable for combining unrelated visualizations

### Data-Aware Composition: Integrated Data Visualization

Data-aware composition is `ggalign`'s core innovation, where multiple plots share
common observations and maintain consistent data alignment across all
visualizations.

```{mermaid}
graph TB
    SHARED["Shared Data<br/>Common observations"]
    LAYOUT["Layout System:<br/>quad_layout()<br/>stack_layout()<br/>circle_layout()"]
    ALIGN["Layout Customization<br/>Data-Level Ordering and Grouping"]
    PLOTS["Coordinated Plots<br/>Automatic observation sync"]
    OUTPUT2["Integrated Visualization<br/>Guaranteed alignment"]
    
    SHARED --> LAYOUT
    LAYOUT --> ALIGN
    LAYOUT --> PLOTS
    ALIGN --> OUTPUT2
    PLOTS --> OUTPUT2

    style SHARED fill:#d0e6f7,stroke:#1f78b4,stroke-width:2px,color:#0b3d91
    style LAYOUT fill:#f0f4c3,stroke:#c0ca33,stroke-width:2px,color:#616515
    style ALIGN fill:#ffe0b2,stroke:#fb8c00,stroke-width:2px,color:#663c00
    style PLOTS fill:#dcedc8,stroke:#689f38,stroke-width:2px,color:#33691e
    style OUTPUT2 fill:#c8e6c9,stroke:#388e3c,stroke-width:2px,color:#2e7d32
```

**Key Features:**

- **Observation Consistency**: Data points from same observations aligned across all plots
- **Automatic Synchronization**: No manual coordinate management required
- **Complex Relationships**: Supports one-to-many, many-to-many, and crosswise data relationships
- **Specialized Layouts**: Purpose-built layouts for specific data types
