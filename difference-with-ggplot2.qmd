# Difference-with-ggplot2
`ggalign` focuses on aligning observations across multiple plots. While it
builds on the `ggplot2` framework, there are key differences in how scales,
facets, and coordinates are handled in alignment axes. This vignette highlights
these syntax differences. 

The following syntax applies to all `align_*` functions that add a plot area,
and to the main plot in `quad_layout()` when alignment is needed. 

```{r setup}
#| echo: false
#| output: false
library(ggalign)
set.seed(123)
small_mat <- matrix(rnorm(56), nrow = 7)
rownames(small_mat) <- paste0("row", seq_len(nrow(small_mat)))
colnames(small_mat) <- paste0("column", seq_len(ncol(small_mat)))
```

## Axes used for alignment
Axes used for alignment in `ggalign` refer to:
- x-axis in vertical stack layouts

- x-axis in horizontal stack layouts

- x- and y- axes in the `quad_layout()` main plot

`ggalign` introduces special syntax and handling for these axes, differing from
the default behavior in `ggplot2`. These adjustments ensure that observations
are properly aligned and operations are user-friendly. 

## Position Scales
To better fit the alignment-based layout, `ggalign` introduces adjustments to
`breaks`, `labels`, and `expand` arguments. 

### breaks
`breaks` and `labels` are typically handled similarly to discrete scales, as we
focus on aligning observations (which should be regarded as discrete variables);
no matter what you use is continuous scale or discrete scale.

`breaks` should be one of:

    - `NULL` for no breaks

    - `waiver()` for the default breaks (the full data index or `NULL` if no
    data names and `labels` is `waiver()`)

    - A character vector of breaks (rownames / colunames of the matrix).

    - A numeric vector of data index (must be an integer).

    - A function that takes the data names or the data index as input and
    returns breaks as output. Also accepts rlang lambda function notation. 

Default `breaks` without names:
```{r}
no_names <- small_mat
colnames(no_names) <- NULL
ggheatmap(no_names) + scale_x_continuous()
```

No breaks:
```{r}
ggheatmap(small_mat) + scale_x_continuous(breaks = NULL)
```

```{r}
ggheatmap(small_mat, filling = FALSE) +
    geom_tile(aes(.column_names, .row_names, fill = value)) +
    scale_x_discrete(breaks = NULL)
```

Character-based `breaks` use data names (or `indices` if names are absent)
```{r}
ggheatmap(small_mat) +
    scale_x_continuous(breaks = c("column3", "column5")) +
    anno_top() +
    align_dendro(k = 3L)
```

```{r}
ggheatmap(small_mat, filling = FALSE) +
    geom_tile(aes(.column_names, .row_names, fill = value)) +
    scale_x_discrete(breaks = c("column3", "column5")) +
    anno_top() +
    align_dendro(k = 3L)
```

Integer-based `breaks` are interpreted as data indices:
```{r}
ggheatmap(small_mat) +
    scale_x_continuous(breaks = c(3, 5)) +
    anno_top() +
    align_dendro(k = 3L)
```

```{r}
ggheatmap(small_mat, filling = FALSE) +
    geom_tile(aes(.column_names, .row_names, fill = value)) +
    scale_x_discrete(breaks = c(3, 5)) +
    anno_top() +
    align_dendro(k = 3L)
```

Floating numbers are invalid for `breaks`:
```{r error=TRUE}
ggheatmap(small_mat) + scale_x_continuous(breaks = c(3.5, 5))
```

To interpret integers as plot-specific coordinate indices, wrap them with `I()`:
```{r}
ggheatmap(small_mat) +
    scale_x_continuous(breaks = I(3:4)) +
    anno_top() +
    align_dendro(k = 3L)
```

### labels
`labels` should be one of:

    - `NULL` for no labels

    - `waiver()` for the default labels (data names)

    - A character vector giving labels (must be same length as breaks)

    - An expression vector (must be the same length as breaks). See `?plotmath`
    for details. 

    - A function that takes the data names (or data index if data has no names)
    as input and returns labels as output. This can be also a rlang lambda
    function.

The default labels are the data names (or indices if names are absent):
```{r}
ggheatmap(small_mat) + scale_x_continuous() +
    anno_top() +
    align_dendro(k = 3L)
```

No labels:
```{r}
ggheatmap(small_mat) +
    scale_x_continuous(labels = NULL) +
    anno_top() +
    align_dendro(k = 3L)
```

Character labels will be reordered based on the data's ordering:
```{r}
ggheatmap(small_mat) +
    scale_x_continuous(labels = letters[seq_len(ncol(small_mat))]) +
    anno_top() +
    align_dendro(k = 3L)
```

To retain the original order of character labels, wrap them with `I()`:
```{r}
ggheatmap(small_mat) +
    scale_x_continuous(labels = I(letters[seq_len(ncol(small_mat))])) +
    anno_top() +
    align_dendro(k = 3L)
```

By default, labels correspond to `breaks`:
```{r}
ggheatmap(small_mat) +
    scale_x_continuous(breaks = c(5, 3), labels = c("a", "b"))
```

To override the default matching, wrap the labels vector with `I()`:
```{r}
ggheatmap(small_mat) +
    scale_x_continuous(breaks = c(5, 3), labels = I(c("a", "b")))
```

### expand
By default, we utilize zero expansion for the aligned axis. This is typically
the desired setting. If you wish to introduce expansion, you must manually
adjust it and apply it to each plot to ensure proper axis alignment.
```{r}
ggheatmap(small_mat) +
    scale_x_continuous(expand = expansion(mult = 0.1)) +
    anno_top() +
    align_dendro(aes(color = branch), k = 3L) +
    scale_x_continuous(expand = expansion(mult = 0.1))
```

You can utilize `ggh4x::facetted_pos_scales()` to set scales for each panel.

## theme
Although ggplot2 does not officially support vectorized input for theme
elements, we can still utilize it. `ggalign` extends this feature, allowing
theme elements to be vectorized and applied across panels.
```{r}
ggheatmap(small_mat) +
    theme(
        axis.text.x = element_text(
            colour = c(rep("red", 4), rep("blue", 5))
        ),
        axis.ticks.x = element_line(
            colour = c(rep("red", 4), rep("blue", 5))
        ),
        axis.ticks.length.x = unit(rep(c(1, 4), times = c(4, 5)), "mm")
    ) +
    anno_top() +
    align_dendro(aes(color = branch), k = 3L) +
    scale_y_continuous(expand = expansion()) &
    theme(plot.margin = margin())
```

## Facets
When working with facets, manual configuration of the panel using the
`facet_*()` functions is not possible since the internal structure will use
`facet_grid()` to set the row/column groups defined by `align_*()` functions.
However, you can still use `facet_grid()` or `facet_null()` (if no panel) to
control other arguments except aligned panels (`rows` in horizontal stack layout
or `cols` in vertical stack layout, or both `rows` and `cols` in heatmap body). 

A common use case is to modify the panel strip text. The default theme
(`theme_ggalign()`) will always remove the panel strip text, you can override
this behaviour with `theme(strip.text = element_text())` to add the panel title
in the plot area.
```{r}
ggheatmap(small_mat) +
    facet_grid(labeller = labeller(.column_panel = function(x) letters[as.integer(x)])) +
    theme(strip.text = element_text()) +
    anno_top() +
    align_kmeans(centers = 3L)
```

## Coords
Currently, only cartesian coordinate can be used to align axis well.
Internally, the limits will always be set to the number of observations, with an
additional range expansion of `0.5` added on both ends. 
