# A list of `quad_layout()` {#sec-multiple-quad-layouts}
Similarly, `stack_layout()` can be added to a `quad_layout()`, and a
`quad_layout()` can also be added to a `stack_layout()`.

```{r setup}
#| code-fold: true
library(ggalign)
set.seed(123)
small_mat <- matrix(rnorm(56), nrow = 7)
rownames(small_mat) <- paste0("row", seq_len(nrow(small_mat)))
colnames(small_mat) <- paste0("column", seq_len(ncol(small_mat)))
```

> note: when `stack_layout()` contains a nested `quad_layout()`, it cannot be used
within the annotation of another `quad_layout()`. 

Here is a summarized table showing which `quad_layout()` can be used with each `stack_layout()`:

|                                 | `stack_discreteh()` | `stack_discretev()` | `stack_continuoush()` | `stack_continuousv()` |
| ------------------------------- | ------------------- | ------------------- | --------------------- | --------------------- |
| `quad_continuous()`/`ggside()`  | ❌                  | ❌                  | ✅                    | ✅                    |
| `quad_layout(xlim = ...)`       | ✅                  | ❌                  | ❌                    | ✅                    |
| `quad_layout(ylim = ...)`       | ❌                  | ✅                  | ✅                    | ❌                    |
| `quad_discrete()`/`ggheatmap()` | ✅                  | ✅                  | ❌                    | ❌                    |

## `stack_discrete()`
As discussed in @sec-stack-layout-plot-initialize, `stack_discrete()` can accept
plots regardless of whether alignment of observations is required. 

```{r}
stack_discreteh(small_mat) +
    ggheatmap() +
    theme(axis.text.x = element_text(hjust = -60, angle = -90)) +
    ggheatmap() +
    theme(axis.text.x = element_text(hjust = -60, angle = -90))
```

When `ggheatmap()`/`quad_layout()` is added to a `stack_layout()`, it will also
set the active context to itself, which means subsequent addition will be
directed to `ggheatmap()`/`quad_layout()`. One exception is the
`ggheatmap()`/`quad_layout()` itself, which cannot be added to another
`quad_layout()`. In this case, they will be added directly to the
`stack_layout()`.

```{r}
stack_discretev(small_mat) +
    ggheatmap() +
    ggheatmap() +
    scale_fill_viridis_c()
```

The data of `ggheatmap()`/`quad_layout()` can inherit from the `stack_layout()`,
but the data format must match. Otherwise, you will need to manually provide the
data. 

When `ggheatmap()`/`quad_layout()` is added to a vertical `stack_discrete()`,
the inherited matrix is transposed before use. This is because the columns of
`ggheatmap()`/`quad_layout()` must match the number of observations in
`stack_discrete()`.
```{r}
stack_discretev(small_mat) +
    ggheatmap() +
    ggheatmap()
```

`stack_discrete()` ensures that all plots aligned along the stack have the same
ordering index or groups for the observations.


We can customize the layout in the `stack_discrete()` directly, or in
`quad_layout()`. As introduced in @sec-stack-layout-active-plot, you can easily
switch from the `ggheatmap()`/`quad_layout()` to the `stack_layout()` using
`stack_active()`.

::: {.grid}

::: {.g-col-6}
```{r}
stack_discretev(small_mat) +
    ggheatmap() +
    ggheatmap() +
    anno_bottom(size = 0.2) +
    align_dendro(aes(color = branch), k = 3)+
    layout_title("dendrogram in ggheatmap()")
```
:::

::: {.g-col-6}
```{r}
stack_discretev(small_mat) +
    ggheatmap() +
    ggheatmap() +
    stack_active() +
    align_dendro(aes(color = branch), k = 3, size = 0.2) +
    scale_y_reverse() +
    layout_title("dendrogram in stack_layout()")
```
:::

:::

When applied to a `stack_layout()`, the orientation of the dendrogram may need
to be manually adjusted.

## `stack_continuous()`
However, `stack_continuous()` is designed to only accept plots that are not aligned
along the axis (@sec-stack-layout-plot-initialize). Below is a table summarizing
which `quad_layout()` are compatible with `stack_continuous()`:

```{r}
alignh_quad_plot <- quad_alignh(small_mat) +
    geom_boxplot(aes(value, .discrete_y, fill = .row_names)) +
    scale_fill_brewer(palette = "Dark2")
stack_continuousv() +
    alignh_quad_plot +
    alignh_quad_plot
```

## Control sizes
A numeric or a unit object of length 3 should be provided in
`stack_discrete()`/`stack_continuous()` when placing a `quad_layout()`. For
vertical `stack_layout()`, this means `quad_layout()` with left or right
annotations; for horizontal `stack_layout()`, this means `quad_layout()` with
top or bottom annotations. The first size controls the relative `width`/`height`
of the left or top annotation, the second controls the relative `width`/`height`
of the main plot, and the third controls the relative `width`/`height` of the
right or bottom annotation. 

By default the three rows/columns will have equal sizes.
```{r}
stack_discretev(small_mat) +
    ggheatmap() +
    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +
    anno_left() +
    align_dendro(aes(color = .panel), k = 3L) +
    anno_right() +
    ggalign(data = rowSums) +
    geom_bar(aes(value, fill = .panel), orientation = "y", stat = "identity") +
    ggheatmap() +
    theme(axis.text.x = element_text(angle = -60, hjust = 0))
```

```{r}
heat1 <- ggheatmap(t(small_mat)) +
    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +
    anno_left() +
    align_dendro(aes(color = .panel), k = 3L) +
    anno_right() +
    ggalign(data = rowSums) +
    geom_bar(aes(value, fill = .panel), orientation = "y", stat = "identity")

stack_discretev(small_mat, sizes = c(1, 2, 1)) +
    heat1 +
    ggheatmap() +
    theme(axis.text.x = element_text(angle = -60, hjust = 0))
```

In this way, the width/height of main plot specified in `quad_active()` or
`quad_layout()`/`ggheatmap()` won't work.
```{r}
stack_discretev(small_mat) +
    ggheatmap(width = unit(2, "null")) + # not work
    theme(axis.text.x = element_text(angle = -60, hjust = 0)) +
    anno_left() +
    align_dendro(aes(color = .panel), k = 3L) +
    anno_right() +
    ggalign(data = rowSums) +
    geom_bar(aes(value, fill = .panel), orientation = "y", stat = "identity") +
    ggheatmap(width = unit(2, "null")) + # not work
    theme(axis.text.x = element_text(angle = -60, hjust = 0))
```

Next, we will build on these concepts and explore even more advanced strategies
for integrating elements across multiple plots or annotations in a layout.
