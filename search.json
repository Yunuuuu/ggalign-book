[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ggalign: Bridging the Grammar of Graphics and Complex layout",
    "section": "",
    "text": "Preface\nWelcome to ggalign documents",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "introduction.html",
    "href": "introduction.html",
    "title": "1  Introduction",
    "section": "",
    "text": "1.1 Installation\nggalign extends ggplot2 by providing advanced tools for aligning and organizing multiple plots, particularly those that automatically reorder observations, such as dendrogram. It offers fine control over layout adjustment and plot annotations, enabling you to create complex, publication-quality visualizations while still using the familiar grammar of ggplot2.\nYou can install ggalign from CRAN using:\ninstall.packages(\"ggalign\")\nAlternatively, install the development version from r-universe with:\ninstall.packages(\"ggalign\",\n    repos = c(\"https://yunuuuu.r-universe.dev\", \"https://cloud.r-project.org\")\n)\nor from GitHub with:\n# install.packages(\"remotes\")\nremotes::install_github(\"Yunuuuu/ggalign\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#general-design",
    "href": "introduction.html#general-design",
    "title": "1  Introduction",
    "section": "1.2 General design",
    "text": "1.2 General design\nThe core feature of ggalign lies in its integration of the grammar of graphics principles into advanced visualization, achieved through its object-oriented Layout system. Two primary Layout classes are available:\n\nthe StackLayout class: Put plots horizontally or vertically.\nthe QuadLayout class: Arranges plots in the four quadrants (top, left, bottom, right) around a main plot. This layout is ideal for designs that require supplementary plots or annotations surrounding a central figure.\n\nBoth Layout classes support the alignment of observations. Observations refer to data points or samples, allowing for consistent alignment of corresponding data across multiple plots when using the same axis values. Depending on whether you want to align observations across multiple plots within the layout, the following variants are available:\nFor StackLayout:\n\nstack_align(): align the observations along the stack.\nstack_free(): don’t align the observations.\n\nFor QuadLayout:\n\nquad_free/ggside: Never align observations.\nquad_alignh: Align observations in the horizontal direction.\nquad_alignv: Align observations in the vertical direction.\nquad_alignb: Align observations in both horizontal and vertical directions.\n\n\n\n\nGeneral design of ggalign",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "introduction.html#getting-started",
    "href": "introduction.html#getting-started",
    "title": "1  Introduction",
    "section": "1.3 Getting Started",
    "text": "1.3 Getting Started\n\nlibrary(ggalign)\n\nLoading required package: ggplot2\n\n\nThe usage of ggalign is simple if you’re familiar with ggplot2 syntax, the typical workflow includes:\n\nInitialize the layout using stack_layout() (ggstack()/cross_align()) or quad_layout() (ggside()/ggheatmap()/ggoncoplot()).\nCustomize the layout with:\n\nalign_group(): Group observations into panel with a group variable.\nalign_kmeans(): Group observations into panel by kmeans.\nalign_order(): Reorder layout observations based on statistical weights or by manually specifying the observation index.\nalign_hclust()/align_dendro(): Reorder or Group layout based on hierarchical clustering.\n\nAdding plots with ggalign() or ggfree(), and then layer additional ggplot2 elements such as geoms, stats, or scales.\n\n\nset.seed(123)\nsmall_mat &lt;- matrix(rnorm(56), nrow = 7)\nrownames(small_mat) &lt;- paste0(\"row\", seq_len(nrow(small_mat)))\ncolnames(small_mat) &lt;- paste0(\"column\", seq_len(ncol(small_mat)))\n\nEvery *_layout() function accepts default data, which will be inherited by all plots within the layout.\nHere’s a simple example:\n\nstack_alignv(small_mat) +\n    align_dendro() +\n    theme(axis.text.y = element_text())\n\n\n\n\n\n\n\n\nThis produces a simple dendrogram. By default, stack_alignv() removes the axis text on the axis used for aligning observations. This is because it’s often unclear which plot should display the axis text, as typically, we want it to appear in only one plot. However, you can easily use the theme() function to control where the axis text appears.\nInternally, align_dendro() will reorder the observations based on the dendrogram, and other plots in the layout will follow this ordering.\n\nstack_alignv(small_mat) +\n    align_dendro() +\n    ggalign(data = rowSums) +\n    geom_bar(aes(.names, value), stat = \"identity\") +\n    theme(axis.text.y = element_text())\n\n\n\n\n\n\n\n\nIn this example:\n\nWe initialize a vertical stack (stack_alignv(small_mat)).\nReorder the observations based on hierarchical clustering and add a dendrogram tree (align_dendro()).\nCreate a new plot in the layout, and use data based on the sum of the layout data (ggalign(data = rowSums)).\nAdd ggplot2 components to the plot.\n\nThe data in the underlying ggplot object of ggalign contains at least following columns (more details will be introduced in a later chapter):\n\n.panel: the panel for the aligned axis. It means x-axis for vertical stack layout (including top and bottom annotation), y-axis for horizontal stack layout (including left and right annotation).\n.x or .y: the x or y coordinates\n.names and .index: A factor of the names (only applicable when names exists) and an integer of index of the original data.\nvalue: the actual value (only applicable if data is a matrix or atomic vector).\n\nalign_dendro() can also split the observations into groups.\n\nstack_alignv(small_mat) +\n    align_dendro(k = 3) +\n    ggalign(data = rowSums) +\n    geom_bar(aes(.names, value, fill = .panel), stat = \"identity\") +\n    scale_fill_brewer(palette = \"Dark2\", name = \"Group\") +\n    theme(axis.text.y = element_text())\n\n\n\n\n\n\n\n\nIn this example:\n\nWe initialize a vertical stack (stack_alignv(small_mat)).\nReorder and group the observations based on hierarchical clustering, and add a dendrogram tree (align_dendro(k = 3)).\nCreate a new plot in the layout (ggalign(data = rowSums)), which will use data based on the sums of the layout data.\nAdd ggplot2 components to the plot.\n\nOne common visualization associated with the dendrogram is the heatmap. You can use ggheatmap() to initialize a heatmap layout. When grouping the observations using align_dendro(k = 3), a special column named branch is added, which you can use to color the dendrogram tree.\n\nggheatmap(small_mat) +\n    anno_left() +\n    align_dendro(aes(color = branch), k = 3)+\n    scale_fill_brewer(palette = \"Dark2\")\n\n→ heatmap built with `geom_tile()`\n\n\n\n\n\n\n\n\n\nIn this example:\n\nWe initialize a heatmap layout (ggheatmap(small_mat)).\nwe initialize an annotation in the left side of the heatmap body, and set it as the active context, in this way, all following addition will be directed to the left annotation. (anno_left())\nReorder and group the observations based on hierarchical clustering, and add a dendrogram tree, coloring the tree by branch (align_dendro(k = 3)).\n\nggheatmap() will automatically add the names for the heatmap, so you don’t need to manually adjust axis text visibility using theme(axis.text.x = element_text())/theme(axis.text.y = element_text()).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "stack-layout.html",
    "href": "stack-layout.html",
    "title": "2  stack layout",
    "section": "",
    "text": "2.1 Input data\nstack_layout() arranges plots either horizontally or vertically, and we can also use the alias ggstack(). Based on whether we want to align the observations, there are two types of stack layouts:\nSeveral aliases are available for convenience:\nWhen aligning observations, we typically use a matrix, as it is easy to melt the matrix into a long formated data frame. In addition, we need a matrix to fit the observations concept, since we need transpose the data (rows to columns, columns to rows) when used in quad_layout()/ggheatmap(), which can align observations in both direction simutaneuously.\nBy default, fortify_data_frame() will invoke the ggplot2::fortify() function for conversion. Note, for matrices, it will convert the matrix into a long-formatted data frame.\nset.seed(123)\nsmall_mat &lt;- matrix(rnorm(56), nrow = 7)\nrownames(small_mat) &lt;- paste0(\"row\", seq_len(nrow(small_mat)))\ncolnames(small_mat) &lt;- paste0(\"column\", seq_len(ncol(small_mat)))\nBy default, stack_align()/stack_free() will set up the layout, but no plot will be drawn until you add a plot element:\nstack_alignh(small_mat) \n# the same for `stack_free()`",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>stack layout</span>"
    ]
  },
  {
    "objectID": "stack-layout.html#input-data",
    "href": "stack-layout.html#input-data",
    "title": "2  stack layout",
    "section": "",
    "text": "For stack_free(), a data frame is required, and the input will be automatically converted using fortify_data_frame() if needed.\nFor stack_align(), a matrix is required, and the input will be automatically converted using fortify_matrix() if needed.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>stack layout</span>"
    ]
  },
  {
    "objectID": "stack-layout.html#plot-initialize",
    "href": "stack-layout.html#plot-initialize",
    "title": "2  stack layout",
    "section": "2.2 plot initialize",
    "text": "2.2 plot initialize\nFor stack_align(), plots can be added regardless of whether they need to align observations.\n\nstack_alignh(small_mat) +\n    align_kmeans(centers = 3L) +\n    ggalign(data = rowSums) +\n    geom_bar(aes(value, fill = .panel), orientation = \"y\", stat = \"identity\") +\n    facet_grid(switch = \"y\") +\n    theme(strip.text = element_text()) +\n    align_dendro(aes(color = branch))\n\n\n\n\n\n\n\n\nWe can stack the plots vertically with stack_alignv():\n\nstack_alignv(small_mat) + align_dendro()\n\n\n\n\n\n\n\n\n\nNote that vertical stack take the x-axis as the observations, but horizontal stack take the y-axis as the observations.\n\nstack_align() can add plot without alignment of observations.\n\nstack_alignv() +\n    ggfree(aes(displ, hwy, colour = class), data = mpg) +\n    geom_point(size = 2) +\n    ggfree(aes(displ, hwy, colour = class), data = mpg) +\n    geom_point(size = 2) &\n    scale_color_brewer(palette = \"Dark2\") &\n    theme_bw()\n\n\n\n\n\n\n\n\nFor stack_free(), only plots that are free from alignment (ggfree()) can be added along the axis.\n\nstack_freev(mpg) +\n    ggfree(aes(displ, hwy, colour = class)) +\n    geom_point(size = 2) +\n    ggfree(aes(displ, hwy, colour = class)) +\n    geom_point(size = 2) &\n    scale_color_brewer(palette = \"Dark2\") &\n    theme_bw()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>stack layout</span>"
    ]
  },
  {
    "objectID": "stack-layout.html#layout-customization",
    "href": "stack-layout.html#layout-customization",
    "title": "2  stack layout",
    "section": "2.3 Layout Customization",
    "text": "2.3 Layout Customization\nWhen we use stack_align(), it aligns the observations across multiple plots along the specified direction:\n\nFor stack_alignh(): Alignment occurs along the horizontal direction (y-axis).\nFor stack_alignv(): Alignment occurs along the vertical direction (x-axis).\n\nOne useful situation for stack_align() is with dendrograms, which inherently reorder the observations. The align_dendro() function is specifically designed for this purpose. It can reorder the observations, split them into groups, and can add a plot for visualization.\n\nstack_alignh(small_mat) + \n    align_dendro() +\n    theme(axis.text.y = element_text())\n\n\n\n\n\n\n\n\nWe don’t provide data to align_dendro(), by default, it’ll inherit data from the layout. But you can always provide another data, but note that this package use the concept of \"number of observations\" in the vctrs package or NROW() function. When aligning the observations, you must ensure the number of observations is equal.\n\nset.seed(123)\nstack_alignh(small_mat) + \n    align_dendro(data =  matrix(rnorm(70), nrow = 7)) +\n    theme(axis.text.y = element_text())",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>stack layout</span>"
    ]
  }
]