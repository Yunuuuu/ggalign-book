# Layout customize
For layouts that can align observations, the package provides a suite of `align_*`
functions designed to give you precise control over the layout. These functions
allow you to reorder observations or partition them into multiple groups.

Currently, there are four key `align_*` functions available for layout customization:

- **`align_group`**: Group and align plots based on categorical factors.
- **`align_order`**: Reorder layout observations based on statistical weights
 or allows for manual reordering based on user-defined ordering index.
- **`align_kmeans`**: Group observations by k-means clustering results.
- **`align_hclust`**: Reorder or group observations based on hierarchical clustering.

Note that none of these functions add a plot area or set the active context,
meaning you cannot add ggplot2 elements to these objects.

```{r setup}
#| code-fold: true
#| collapse: true
library(ggalign)
set.seed(123)
small_mat <- matrix(rnorm(56), nrow = 7)
rownames(small_mat) <- paste0("row", seq_len(nrow(small_mat)))
colnames(small_mat) <- paste0("column", seq_len(ncol(small_mat)))
```

## `align_group()`
The `align_group()` function allows you to split the observations into groups.

```{r}
set.seed(1234)
ggheatmap(small_mat) +
    anno_top() +
    align_group(sample(letters[1:4], ncol(small_mat), replace = TRUE))
```

Note that all `align_*` functions which split observations into groups must not
break the previous established groups. This means the new groups must nest in
the old groups, usually they cannot be used if groups already exist.

```{r error=TRUE}
set.seed(1234)
ggheatmap(small_mat) +
    anno_top() +
    align_group(sample(letters[1:4], ncol(small_mat), replace = TRUE)) +
    align_group(sample(letters[1:5], ncol(small_mat), replace = TRUE))
```

## `align_order()`
The `align_order()` function reorder the observations based on the summary
weights. 

In this example, we order the rows based on their means. By default, the
ordering is in ascending order according to the summary weights. You can reverse
the order by setting `reverse = TRUE`.

::: {.grid}

::: {.g-col-6}
```{r align_order}
ggheatmap(small_mat) +
    anno_left() +
    align_order(rowMeans) +
    layout_title(title = "reverse = FALSE")
```
:::

::: {.g-col-6}
```{r}
ggheatmap(small_mat) +
    anno_left() +
    align_order(rowMeans, reverse = TRUE) +
    layout_title(title = "reverse = TRUE")
```
:::

:::

Additionally, you can provide the ordering integer index or character index
directly:
::: {.grid}

::: {.g-col-6}
```{r}
my_order <- sample(nrow(small_mat))
print(rownames(small_mat)[my_order])
ggheatmap(small_mat) +
    anno_left() +
    align_order(my_order)
```
:::

::: {.g-col-6}
```{r}
ggheatmap(small_mat) +
    anno_left() +
    align_order(rownames(small_mat)[my_order])
```
:::

:::

Some `align_*` functions also accept a `data` argument. Itâ€™s important to note
that all `align_*` functions treat rows as the observations. This means
`NROW(data)` must match the number of observations along the axis used for
alignment. The `data` argument can also accept a function (supporting purrr-like
lambda syntax), which will be applied to the layout matrix.

As mentioned in @sec-heatmap_layout, for top and bottom annotations, the data
matrix of `quad_layout()`/`ggheatmap()` is transposed to create the annotation
`stack_layout()`. Therefore, you can use `rowMeans()` to calculate the mean value
across all columns.

```{r}
ggheatmap(small_mat) +
    anno_top() +
    align_order(rowMeans)
```

Some `align_*` functions that reorder observations include an argument called
`strict`. This argument is especially useful when previous groups have already
been established. If previous groups have been created and `strict = FALSE`, the
function will reorder the observations within each group.
```{r}
set.seed(1234)
ggheatmap(small_mat) +
    anno_top() +
    align_group(sample(letters[1:4], ncol(small_mat), replace = TRUE))+
    align_order(rowMeans, strict = FALSE)
```

## `align_kmeans()`
The `align_kmeans()` function split the observations into groups based on
k-means clustering.
```{r}
ggheatmap(small_mat) +
    anno_top() +
    align_kmeans(3L)
```

## `align_hclust()`
The `align_dendro()` function adds a dendrogram to the layout and can also
reorder or split the layout based on hierarchical clustering. This is
particularly useful for working with heatmap plots.

```{r align_dendro}
ggheatmap(small_mat) +
    anno_top() +
    align_dendro()
```

Hierarchical clustering is performed in two steps: calculate the distance matrix
and apply clustering. You can use the `distance` and `method` argument to
control the dendrogram builind process.

There are two ways to specify `distance` metric for clustering:

- specify `distance` as a pre-defined option. The valid values are the supported
methods in `dist()` function and coorelation coefficient `"pearson"`,
`"spearman"` and `"kendall"`. The correlation distance is defined as `1 - cor(x,
y, method = distance)`.
- a self-defined function which calculates distance from a matrix. The function
should only contain one argument. Please note for clustering on columns, the
matrix will be transposed automatically. 

```{r align_dendro_distance_pearson}
ggheatmap(small_mat) +
    anno_top() +
    align_dendro(distance = "pearson") +
    patch_titles(top = "pre-defined distance method (1 - pearson)")
```

```{r align_dendro_distance_function}
ggheatmap(small_mat) +
    anno_top() +
    align_dendro(distance = function(m) dist(m)) +
    patch_titles(top = "a function that calculates distance matrix")
```

Method to perform hierarchical clustering can be specified by `method`. Possible
methods are those supported in `hclust()` function. And you can also provide a
self-defined function, which accepts the distance object and return a `hclust`
object.

```{r}
ggheatmap(small_mat) +
    anno_top() +
    align_dendro(method = "ward.D2")
```

The dendrogram can also be used to cut the columns/rows into groups. You can
specify `k` or `h`, which work similarly to `cutree()`: 

```{r}
ggheatmap(small_mat) +
    anno_top() +
    align_dendro(k = 3L)
```

In contrast to `align_group()`, `align_kmeans()`, and `align_order()`,
`align_dendro()` is capable of drawing plot components. So it has a default
`set_context` value of `TRUE`, meaning it will set the active context of the
annotation stack layout. In this way, we can add any ggplot elements to this
plot area.

```{r}
ggheatmap(small_mat) +
    anno_top() +
    align_dendro() +
    geom_point(aes(y = y))
```

The `align_dendro()` function creates default `node` data for the ggplot. See
`ggplot2 specification` in `?align_dendro` for details. Additionally, `edge`
data is added to the `ggplote::geom_segment()` layer directly, used to draw the
dendrogram tree. One useful variable in both `node` and `edge` data is the
`branch` column, corresponding to the `cutree` result: 

```{r}
ggheatmap(small_mat) +
    anno_top() +
    align_dendro(aes(color = branch), k = 3) +
    geom_point(aes(color = branch, y = y))
```

You can reorder the dendrogram based on the mean values of the observations by
setting `reorder_dendrogram = TRUE`.
```{r fig.width=10}
h1 <- ggheatmap(small_mat) +
    anno_top() +
    align_dendro(aes(color = branch), k = 3, reorder_dendrogram = TRUE) +
    ggtitle("reorder_dendrogram = TRUE")
h2 <- ggheatmap(small_mat) +
    anno_top() +
    align_dendro(aes(color = branch), k = 3) +
    ggtitle("reorder_dendrogram = FALSE")
align_plots(h1, h2)
```

`align_dendro()` can also perform clustering between groups, meaning it can be
used even if there are existing groups present in the layout, in this way, you
cannot specify `k` or `h`: 

```{r}
set.seed(3L)
column_groups <- sample(letters[1:3], ncol(small_mat), replace = TRUE)
ggheatmap(small_mat) +
    anno_top() +
    align_group(column_groups) +
    align_dendro(aes(color = branch))
```

You can reorder the groups by setting `reorder_group = TRUE`.
```{r}
ggheatmap(small_mat) +
    anno_top() +
    align_group(column_groups) +
    align_dendro(aes(color = branch), reorder_group = TRUE)
```

You can merge the sub-tree in each group by settting `merge_dendrogram = TRUE`.
```{r}
ggheatmap(small_mat) +
    anno_top() +
    align_group(column_groups) +
    align_dendro(aes(color = branch), merge_dendrogram = TRUE)
```

You can reorder the dendrogram and merge simutaneously.
```{r}
ggheatmap(small_mat) +
    anno_top() +
    align_group(column_groups) +
    align_dendro(aes(color = branch),
        reorder_group = TRUE,
        merge_dendrogram = TRUE
    ) +
    anno_bottom() +
    align_dendro(aes(color = branch),
        reorder_group = FALSE,
        merge_dendrogram = TRUE
    )
```

If you specify `k` or `h`, this will always turn off sub-clustering. The same
principle applies to `align_dendro()`, where new groups must be nested within
the previously established groups.  
```{r error=TRUE}
ggheatmap(small_mat) +
    anno_top() +
    align_group(column_groups) +
    align_dendro(k = 2L)
```
